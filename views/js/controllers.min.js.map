{"version":3,"sources":["routes.js","synchronizer/index.js"],"names":["define","Synchronizer","actions","index","$","_","moment","request","urlHelper","taskQueueModelFactory","loadingBar","tq","api","ext","webservices","get","route","archive","all","download","lastTask","start","getData","data","label","$formFields","each","this","name","value","toggleLaunchButtonState","isValid","validity","valid","$launchButton","removeAttr","attr","setState","state","$container","removeClass","className","match","join","$spinner","addClass","msg","$all","hide","updateTime","taskData","setTime","createdAt","createdAtElapsed","timestamp","type","timeFields","text","unix","format","show","setHistoryTime","$form","find","$enqueued","$updated","$completed","_msg","$currentMsg","taskQueue","url","pollSingleIntervals","iteration","Number","MAX_SAFE_INTEGER","interval","pollAllIntervals","on","taskId","status","updatedAt","e","preventDefault","create","action","then","currentTask","pollSingle","id","stop","catch"],"mappings":"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","file":"routes.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n *\n */\ndefine('taoSync/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Synchronizer': {\n            'actions' : {\n                'index' : 'taoSync/controller/synchronizer/index'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 Open Assessment Technologies SA\n */\n\ndefine('taoSync/controller/synchronizer/index',[\n    'jquery',\n    'lodash',\n    'moment',\n    'core/dataProvider/request',\n    'util/url',\n    'core/taskQueue/taskQueueModel',\n    'layout/loading-bar'\n], function ($, _, moment, request, urlHelper, taskQueueModelFactory, loadingBar) {\n    'use strict';\n\n    /**\n     * TAO Extension and API of the taskQueue\n     * @type {Object}\n     */\n    var tq = {\n        api: 'TaskQueueWebApi',\n        ext: 'taoTaskQueue'\n    };\n\n    /**\n     * Urls of webservices\n     * @type {Object}\n     */\n    var webservices = {\n        get: urlHelper.route('get', tq.api, tq.ext),\n        archive: urlHelper.route('archive', tq.api, tq.ext),\n        all: urlHelper.route('getAll', tq.api, tq.ext),\n        download: urlHelper.route('download', tq.api, tq.ext),\n        lastTask: urlHelper.route('lastTask', 'Synchronizer', 'taoSync')\n    };\n\n    /**\n     * Task Label\n     * @type {String}\n     */\n    var taskLabel = 'Data Synchronization';\n\n    /**\n     * Initialize the application\n     */\n    return {\n        start: function start() {\n            /**\n             * Container\n             */\n            var $container = $('#tao-sync-container');\n\n            /**\n             * Form\n             */\n            var $form = $container.find('form');\n\n            /**\n             * Form fields, if any.\n             * Note that `:input` would include the button which is not wanted.\n             * Configured in config/taoSync/syncFormFields.conf.php\n             */\n            var $formFields = $form.find('input, select');\n\n            /**\n             * Launch button\n             */\n            var $launchButton = $form.find('button[data-control=\"launch\"]');\n\n            /**\n             * Spinners\n             */\n            var $spinner = $form.find('.feedback-info .icon-loop');\n\n            /**\n             * Start and update time\n             */\n            var timeFields = {\n                $enqueued: $form.find('.enqueue-time'),\n                $updated: $form.find('.update-time'),\n                $completed: $form.find('.complete-time')\n            };\n\n            /**\n             * Dynamic messages in the feedback boxes. These are based on the `data-type` elements\n             * and stored in the format msg.$foo to indicate that $foo is a jquery element.\n             */\n            var msg = (function () {\n                var _msg = {\n                    $all: $form.find('.msg')\n                };\n                _msg.$all.each(function () {\n                    var $currentMsg = $(this);\n                    _msg['$' + $currentMsg.data('type')] = $currentMsg;\n                });\n                return _msg;\n            }());\n\n            /**\n             * Task Queue object\n             */\n            var taskQueue = taskQueueModelFactory({\n                url: {\n                    get: webservices.get,\n                    archive: webservices.archive,\n                    all: webservices.all,\n                    download: webservices.download\n                },\n                pollSingleIntervals: [\n                    {iteration: Number.MAX_SAFE_INTEGER, interval: 2000}\n                ],\n                pollAllIntervals: [\n                    {iteration: 1, interval: 8000},\n                    {iteration: 0, interval: 5000}\n                ]\n            }).on('pollSingleFinished', function (taskId, taskData) {\n                if (taskData.status === 'completed') {\n                    setState('success');\n                    updateTime(taskData);\n                    setHistoryTime(taskData.updatedAt, '$completed');\n                }\n                else if (taskData.status === 'failed') {\n                    setState('error');\n                }\n            }).on('pollSingle', function (taskId, taskData) {\n                updateTime(taskData);\n            }).on('error', function () {\n                setState('error');\n            });\n\n            /**\n             * Get task parameters\n             *\n             * @returns {Object}\n             */\n            function getData() {\n                var data = {\n                    label: taskLabel\n                };\n                $formFields.each(function () {\n                    data[this.name] = this.value;\n                });\n                return data;\n            }\n\n            /**\n             * Dis/enable Launch Button depending on the state of fields\n             * that have any kind of HTML validator\n             */\n            function toggleLaunchButtonState() {\n                var isValid = true;\n                $formFields.each(function () {\n                    isValid = this.validity.valid;\n                    return isValid;\n                });\n                if (isValid) {\n                    $launchButton.removeAttr('disabled');\n                } else {\n                    $launchButton.attr('disabled', 'disabled');\n                }\n            }\n\n            /**\n             * Set the state to progress|success|error\n             *\n             * @param {String} state\n             */\n            function setState(state) {\n                $container.removeClass(function (index, className) {\n                    return (className.match(/(^|\\s)state-\\S+/g) || []).join(' ');\n                });\n                // make sure spinner doesn't use unnecessary resources\n                $spinner[state === 'progress' ? 'addClass' : 'removeClass']('spinner-icon');\n                $container.addClass('state-' + state);\n                msg.$all.hide();\n            }\n\n            /**\n             * Update the displayed times\n             * @param {Object} taskData\n             */\n            function updateTime(taskData) {\n                setTime(taskData.createdAt, '$enqueued');\n                setTime(taskData.createdAt + taskData.createdAtElapsed, '$updated');\n            }\n\n            /**\n             * Display time in a localized format\n             *\n             * @param {Number} timestamp\n             * @param {String} type\n             */\n            function setTime(timestamp, type) {\n                timeFields[type] && timeFields[type].text(moment.unix(timestamp).format('LTS'));\n                msg[type] && msg[type].show();\n            }\n\n            /**\n             * Display history time in a localized format\n             *\n             * @param {Number} timestamp\n             * @param {String} type\n             */\n            function setHistoryTime(timestamp, type) {\n                setTime(timestamp, type);\n                $container.addClass('history');\n            }\n\n            // avoids unwanted flicker caused by the late loading of the CSS\n            $container.find('.fb-container').removeClass('viewport-hidden');\n            loadingBar.start();\n\n            // check if all form fields are valid, if applicable\n            $formFields.on('keyup paste blur', toggleLaunchButtonState);\n\n            // there might be no form fields at all\n            // or they might have received valid entries by other means\n            toggleLaunchButtonState();\n\n            // set form actions\n            $form.on('submit', function (e) {\n                e.preventDefault();\n                setState('progress');\n                taskQueue.create(this.action, getData());\n            });\n            $form.find('button[data-control=\"close\"]').on('click', function (e) {\n                e.preventDefault();\n                setState('form');\n            });\n\n            request(webservices.lastTask)\n                .then(function (currentTask) {\n                    if (currentTask && currentTask.status) {\n                        switch (currentTask.status) {\n                            case 'failed':\n                                setState('error');\n                                break;\n                            case 'completed':\n                                setState('form');\n                                updateTime(currentTask);\n                                setHistoryTime(currentTask.updatedAt, '$completed');\n                                break;\n                            default:\n                                setState('progress');\n                                updateTime(currentTask);\n                                taskQueue.pollSingle(currentTask.id);\n                        }\n                    }\n                    else {\n                        setState('form');\n                    }\n                    loadingBar.stop();\n                })\n                .catch(function () {\n                    setState('error');\n                });\n        }\n    };\n});\n\n"]}