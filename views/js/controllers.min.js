define("taoSync/controller/routes",[],function(){"use strict";return{Synchronizer:{actions:{index:"taoSync/controller/synchronizer/index"}}}}),define("taoTaskQueue/model/taskQueueModel",["jquery","lodash","core/promise","core/eventifier","core/polling","core/dataProvider/request","jquery.fileDownload"],function($,_,Promise,eventifier,polling,request){"use strict";function hasSameState(task1,task2){return task1.status===task2.status||("created"===task1.status||"in_progress"===task1.status)&&("created"===task2.status||"in_progress"===task2.status)}var _defaults={url:{get:"",archive:"",all:"",download:""},pollSingleIntervals:[{iteration:4,interval:1e3}],pollAllIntervals:[{
iteration:10,interval:5e3},{iteration:0,interval:1e4}]};return function(config){var model,_cache,singlePollings={},getPollSingleIntervals=function(){if(config.pollSingleIntervals&&_.isArray(config.pollSingleIntervals))return _.cloneDeep(config.pollSingleIntervals)},getPollAllIntervals=function(){if(config.pollAllIntervals&&_.isArray(config.pollAllIntervals))return _.cloneDeep(config.pollAllIntervals)};return config=_.defaults(config||{},_defaults),model=eventifier({setEndpoints:function(urls){return _.assign(config.url,urls||{}),this},get:function(taskId){var status;if(!config.url||!config.url.get)throw new TypeError("config.url.get is not configured while get() is being called");
return status=request(config.url.get,{taskId:taskId},"GET",{},!0).then(function(taskData){return taskData&&taskData.status?(_cache?_cache[taskData.id]?hasSameState(_cache[taskData.id],taskData)||model.trigger("singletaskstatuschange",taskData):model.trigger("singletaskadded",taskData):_cache={},_cache[taskData.id]=taskData,taskData):Promise.reject(new Error("failed to get task data"))}),status.catch(function(err){model.trigger("error",err)}),status},getAll:function(){var status;if(!config.url||!config.url.all)throw new TypeError("config.url.all is not configured while getAll() is being called");return status=request(config.url.all,{limit:100},"GET",{},!0).then(function(taskData){
var newCache={};return taskData?(_cache?(_.forEach(taskData,function(task){var id=task.id;_cache[id]?hasSameState(_cache[id],task)||model.trigger("multitaskstatuschange",task):model.trigger("multitaskadded",task),newCache[id]=task}),_.forEach(_.difference(_.keys(_cache),_.keys(newCache)),function(id){model.trigger("taskremoved",_cache[id])})):_.forEach(taskData,function(task){newCache[task.id]=task}),_cache=newCache,taskData):Promise.reject(new Error("failed to get all task data"))}),status.catch(function(err){model.trigger("error",err)}),status},archive:function(taskId){var status;if(!config.url||!config.url.archive)throw new TypeError("config.url.archive is not configured while archive() is being called");
return status=request(config.url.archive,{taskId:taskId},"GET",{},!0),status.catch(function(res){model.trigger("error",res)}),status},pollAll:function(immediate){var self=this,loop=0,pollingIntervals=getPollAllIntervals(),_updateInterval=function(pollingInstance){var pollingInterval;loop?loop--:(pollingInterval=pollingIntervals.shift(),pollingInterval&&"undefined"!=typeof pollingInterval.iteration&&pollingInterval.interval&&(loop=pollingInterval.iteration,pollingInstance.setInterval(pollingInterval.interval)))};if(!config.url||!config.url.all)throw new TypeError("config.url.all is not configured while pollAll() is being called");return this.globalPolling?(this.globalPolling.start(),
this.trigger("pollAllStart")):(this.globalPolling=polling({action:function(){var statusArr,done=this.async();model.getAll().then(function(taskDataArray){return model.trigger("pollAll",taskDataArray),statusArr=_.map(taskDataArray,"status"),statusArr.indexOf("in_progress")===-1&&statusArr.indexOf("created")===-1?done.reject():(_updateInterval(self.globalPolling),void done.resolve())}).catch(function(){done.reject()})}}),_updateInterval(this.globalPolling),this.globalPolling.start(),this.trigger("pollAllStart")),immediate&&this.globalPolling.next(),model},pollAllStop:function(){return this.globalPolling&&(this.globalPolling.stop(),this.trigger("pollAllStop")),this;
},pollSingle:function(taskId){var self=this,loop=0,pollingIntervals=getPollSingleIntervals(),_updateInterval=function(pollingInstance){var pollingInterval;return loop?(loop--,!0):(pollingInterval=pollingIntervals.shift(),!!(pollingInterval&&pollingInterval.iteration&&pollingInterval.interval)&&(loop=pollingInterval.iteration,pollingInstance.setInterval(pollingInterval.interval),!0))};if(!config.url||!config.url.get)throw new TypeError("config.url.get is not configured while pollSingle() is being called");return singlePollings[taskId]&&singlePollings[taskId].stop(),new Promise(function(resolve){var poll=polling({action:function(){var done=this.async();self.get(taskId).then(function(taskData){
"completed"===taskData.status||"failed"===taskData.status?(poll.stop(),self.trigger("pollSingleFinished",taskId,taskData),resolve({finished:!0,task:taskData})):_updateInterval(poll)?(self.trigger("pollSingle",taskId,taskData),done.resolve()):(self.trigger("pollSingleFinished",taskId,taskData),resolve({finished:!1,task:taskData}))}).catch(function(){done.reject()})}});_updateInterval(poll),singlePollings[taskId]=poll.start(),self.trigger("pollSingleStart",taskId)})},pollSingleStop:function(taskId){return singlePollings&&singlePollings[taskId]&&(singlePollings[taskId].stop(),this.trigger("pollSingleStop",taskId)),this},create:function(url,data){var taskCreate,self=this;
return taskCreate=request(url,data,"POST",{},!0).then(function(creationResult){return creationResult&&creationResult.task&&creationResult.task.id?(self.trigger("created",creationResult),self.pollSingle(creationResult.task.id).then(function(result){return creationResult.extra&&(result.extra=creationResult.extra),result.finished?self.trigger("fastFinished",result):self.trigger("enqueued",result),result})):Promise.reject(new Error("failed to get task data"))}),taskCreate.catch(function(err){model.trigger("error",err)}),taskCreate},download:function(taskId){if(!config.url||!config.url.download)throw new TypeError("config.url.download is not configured while download() is being called");
return new Promise(function(resolve,reject){$.fileDownload(config.url.download,{httpMethod:"POST",data:{taskId:taskId},successCallback:function(result){resolve(result)},failCallback:function(err){reject(err)}})})}})}}),define("taoSync/controller/synchronizer/index",["jquery","lodash","moment","core/dataProvider/request","util/url","taoTaskQueue/model/taskQueueModel","layout/loading-bar"],function($,_,moment,request,urlHelper,taskQueueModelFactory,loadingBar){"use strict";var tq={api:"TaskQueueWebApi",ext:"taoTaskQueue"},webservices={get:urlHelper.route("get",tq.api,tq.ext),archive:urlHelper.route("archive",tq.api,tq.ext),all:urlHelper.route("getAll",tq.api,tq.ext),
download:urlHelper.route("download",tq.api,tq.ext),lastTask:urlHelper.route("lastTask","Synchronizer","taoSync")},taskLabel="Data Synchronization";return{start:function(){function getData(){var data={label:taskLabel};return $formFields.each(function(){data[this.name]=this.value}),data}function toggleLaunchButtonState(){var isValid=!0;$formFields.each(function(){return isValid=this.validity.valid}),isValid?$launchButton.removeAttr("disabled"):$launchButton.attr("disabled","disabled")}function setState(state){$container.removeClass(function(index,className){return(className.match(/(^|\s)state-\S+/g)||[]).join(" ")}),$spinner["progress"===state?"addClass":"removeClass"]("spinner-icon"),
$container.addClass("state-"+state),msg.$all.hide()}function updateTime(taskData){setTime(taskData.createdAt,"$enqueued"),setTime(taskData.createdAt+taskData.createdAtElapsed,"$updated")}function setTime(timestamp,type){timeFields[type]&&timeFields[type].text(moment.unix(timestamp).format("LTS")),msg[type]&&msg[type].show()}function setHistoryTime(timestamp,type){setTime(timestamp,type),$container.addClass("history")}var $container=$("#tao-sync-container"),$form=$container.find("form"),$formFields=$form.find("input, select"),$launchButton=$form.find('button[data-control="launch"]'),$spinner=$form.find(".feedback-info .icon-loop"),timeFields={$enqueued:$form.find(".enqueue-time"),
$updated:$form.find(".update-time"),$completed:$form.find(".complete-time")},msg=function(){var _msg={$all:$form.find(".msg")};return _msg.$all.each(function(){var $currentMsg=$(this);_msg["$"+$currentMsg.data("type")]=$currentMsg}),_msg}(),taskQueue=taskQueueModelFactory({url:{get:webservices.get,archive:webservices.archive,all:webservices.all,download:webservices.download},pollSingleIntervals:[{iteration:Number.MAX_SAFE_INTEGER,interval:2e3}],pollAllIntervals:[{iteration:1,interval:8e3},{iteration:0,interval:5e3}]}).on("pollSingleFinished",function(taskId,taskData){"completed"===taskData.status?(setState("success"),updateTime(taskData),setHistoryTime(taskData.updatedAt,"$completed")):"failed"===taskData.status&&setState("error");
}).on("pollSingle",function(taskId,taskData){updateTime(taskData)}).on("error",function(){setState("error")});$container.find(".fb-container").removeClass("viewport-hidden"),loadingBar.start(),$formFields.on("keyup paste blur",toggleLaunchButtonState),toggleLaunchButtonState(),$form.on("submit",function(e){e.preventDefault(),setState("progress"),taskQueue.create(this.action,getData())}),$form.find('button[data-control="close"]').on("click",function(e){e.preventDefault(),setState("form")}),request(webservices.lastTask).then(function(currentTask){if(currentTask&&currentTask.status)switch(currentTask.status){case"failed":setState("error");break;case"completed":setState("form"),
updateTime(currentTask),setHistoryTime(currentTask.updatedAt,"$completed");break;default:setState("progress"),updateTime(currentTask),taskQueue.pollSingle(currentTask.id)}else setState("form");loadingBar.stop()}).catch(function(){setState("error")})}}});
//# sourceMappingURL=controllers.min.js.map